import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Time points for lunar landing simulation (adjust as needed)
time_points = np.linspace(0, 20, 101)  # Adjusted to 20 seconds for animation

# Lunar Landing Phases
# Descent Stage: Gradual reduction of speed from lunar orbit
descent_speed_profile = np.concatenate([np.linspace(1500, 0, 31), np.linspace(0, 50, 10), np.linspace(50, 0, 60)])
descent_altitude_profile = np.concatenate([np.linspace(10000, 1000, 31), np.linspace(1000, 0, 10), np.zeros(60)])

# Terminal Descent: Controlled descent with low throttle
terminal_descent_speed_profile = np.concatenate([np.linspace(5, 4, 10), np.linspace(4, 2, 10), np.linspace(2, 1, 10), np.linspace(1, 0.5, 10), np.linspace(0.5, 0.1, 10)])
terminal_descent_altitude_profile = np.concatenate([np.linspace(10000, 500, 10), np.linspace(500, 200, 10), np.linspace(200, 50, 10), np.linspace(50, 10, 10), np.zeros(10)])

# Create subplots
fig = make_subplots(rows=2, cols=2, subplot_titles=("Descent Stage: Lunar Orbit to Lunar Surface", "Terminal Descent: Approaching Landing Site"))

# Plotting simulation results for lunar landing phases
fig.add_trace(go.Scatter(x=time_points, y=descent_speed_profile, mode='lines', name='Descent Stage Speed (m/s)'), row=1, col=1)
fig.add_trace(go.Scatter(x=time_points, y=descent_altitude_profile, mode='lines', name='Descent Stage Altitude (m)'), row=1, col=2)
fig.add_trace(go.Scatter(x=time_points, y=terminal_descent_speed_profile, mode='lines', name='Terminal Descent Speed (m/s)'), row=2, col=1)
fig.add_trace(go.Scatter(x=time_points, y=terminal_descent_altitude_profile, mode='lines', name='Terminal Descent Altitude (m)'), row=2, col=2)

# Add a visual representation of the rocket as a circle
rocket_radius = 200  # Radius of the rocket circle
rocket_x = [0] * len(time_points)
rocket_y = [alt + rocket_radius for alt in descent_altitude_profile]
fig.add_trace(go.Scatter(x=rocket_x, y=rocket_y, mode='markers+text', name='Rocket', marker=dict(size=10), text="ðŸš€"), row=1, col=2)

# Update layout
fig.update_layout(
    title="Lunar Spacecraft Landing Simulation",
    template='plotly_dark',
    margin=dict(l=20, r=20, t=40, b=20),
    showlegend=False,  # Hide legend for rocket representation
)

# Show the plot with axis labels, units, and a legend
fig.update_xaxes(title_text="Time (s)", row=2, col=1)
fig.update_xaxes(title_text="Time (s)", row=2, col=2)
fig.update_yaxes(title_text="Speed (m/s)", row=1, col=1)
fig.update_yaxes(title_text="Altitude (m)", row=1, col=2)
fig.update_yaxes(title_text="Speed (m/s)", row=2, col=1)
fig.update_yaxes(title_text="Altitude (m)", row=2, col=2)

# Animate the plots
frames = [go.Frame(
    data=[
        go.Scatter(x=time_points[:i+1], y=descent_speed_profile[:i+1], name='Descent Stage Speed (m/s)'),
        go.Scatter(x=time_points[:i+1], y=descent_altitude_profile[:i+1], name='Descent Stage Altitude (m)'),
        go.Scatter(x=time_points[:i+1], y=terminal_descent_speed_profile[:i+1], name='Terminal Descent Speed (m/s)'),
        go.Scatter(x=time_points[:i+1], y=terminal_descent_altitude_profile[:i+1], name='Terminal Descent Altitude (m)'),
        go.Scatter(x=[rocket_x[i]], y=[rocket_y[i]], mode='markers+text', marker=dict(size=10), text="ðŸš€"),
    ]
) for i in range(len(time_points))]

fig.frames = frames
animation_settings = dict(frame=dict(duration=200, redraw=True), fromcurrent=True)
fig.update_layout(updatemenus=[dict(type='buttons', showactive=False, buttons=[dict(label='Play', method='animate', args=[None, animation_settings])])])

# Show the plot
fig.show()
